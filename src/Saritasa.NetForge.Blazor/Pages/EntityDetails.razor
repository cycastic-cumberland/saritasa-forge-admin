@using Saritasa.NetForge.Blazor.Controls
@using Saritasa.NetForge.Domain.Entities.Options
@using Saritasa.NetForge.Blazor.Extensions
@using Saritasa.NetForge.UseCases.Metadata.GetEntityById
@using Saritasa.NetForge.UseCases.Constants
@inject AdminOptions AdminOptions
@inherits Saritasa.NetForge.Blazor.Pages.MvvmComponentBase<Saritasa.NetForge.Mvvm.ViewModels.EntityDetails.EntityDetailsViewModel>

@if (ViewModel.IsEntityExists)
{
    <PageTitle>@ViewModel.Model.PluralName</PageTitle>
    <MudBreadcrumbs Items="breadcrumbItems"></MudBreadcrumbs>
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h4">@ViewModel.Model.PluralName</MudText>
            <MudText Typo="Typo.body1">@ViewModel.Model.Description</MudText>
        </MudItem>

        @if (ViewModel.CanAdd)
        {
            <MudItem xs="12">
                <MudButton Variant="Variant.Outlined" OnClick="@NavigateToCreation">
                    Add @ViewModel.Model.DisplayName.ToMeaningfulName()
                </MudButton>
            </MudItem>
        }

        @if (ViewModel.IsDisplaySearchInput)
        {
            const int debounceInterval = 250;
            <MudItem xs="6">
                <MudTextField T="string"
                              @bind-Value="ViewModel.SearchString"
                              Placeholder="Search"
                              Immediate="true"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              IconSize="Size.Medium"
                              DebounceInterval="debounceInterval"
                              OnDebounceIntervalElapsed="ViewModel.Search" />
            </MudItem>
        }

        <MudItem xs="12">
            <MudDataGrid T="object" ServerData="ViewModel.LoadEntityGridDataAsync" DragDropColumnReordering="true"
                         @ref="ViewModel.DataGrid" SortMode="SortMode.Multiple"
                         @attributes="NonKeylessEntityDataGridAttributes">
                <Columns>
                    @{
                        foreach (var property in ViewModel.Model.Properties)
                        {
                            if (property is NavigationMetadataDto { IsCollection: false } navigation)
                            {
                                foreach (var targetProperty in navigation.TargetEntityProperties)
                                {
                                    RenderPropertyColumn(targetProperty, navigation.Name);
                                }
                            }
                            else
                            {
                                RenderPropertyColumn(property);
                            }
                        }

                        void RenderPropertyColumn(PropertyMetadataDto property, string? navigationName = null)
                        {
                            <TemplateColumn Title="@property.Name"
                                            Sortable="property.IsSortable"
                                            NavigationName="@navigationName">

                                <HeaderTemplate>
                                    @{
                                        var displayName = ViewModel.GetPropertyDisplayName(property);
                                        if (AdminOptions.TitleCaseProperties)
                                        {
                                            displayName = displayName.ToMeaningfulName();
                                        }

                                        if (string.IsNullOrEmpty(property.Description))
                                        {
                                            @displayName
                                        }
                                        else
                                        {
                                            <MudTooltip Arrow="true" Placement="@Placement.Top">
                                                <ChildContent>
                                                    @displayName
                                                </ChildContent>
                                                <TooltipContent>
                                                    <MudText Typo="@Typo.body2">@property.Description</MudText>
                                                </TooltipContent>
                                            </MudTooltip>
                                        }
                                    }
                                </HeaderTemplate>

                                <CellTemplate Context="cell">
                                    @{
                                        var isNavigation = navigationName is not null;
                                        var isNavigationCollection = false;
                                        if (property is NavigationMetadataDto navigation)
                                        {
                                            isNavigationCollection = navigation.IsCollection;
                                        }

                                        var instance = !isNavigation
                                            ? cell.Item
                                            : cell.Item.GetType().GetProperty(navigationName)?.GetValue(cell.Item);

                                        var propertyValue = ViewModel.GetPropertyValue(instance, property).ToString();

                                        if (propertyValue!.Equals(property.EmptyValueDisplay)
                                            || propertyValue.Equals(DefaultValueConstants.DefaultEmptyPropertyValueDisplay))
                                        {
                                            @propertyValue
                                        }
                                        else if (property.IsImagePath || property.IsBase64Image)
                                        {
                                            <div>
                                                <MudImage Src="@propertyValue"
                                                          Elevation="25"
                                                          Class="rounded-lg property-image" />
                                            </div>
                                        }
                                        else if (property.DisplayAsHtml)
                                        {
                                            @((MarkupString)propertyValue!)
                                        }
                                        else if ((isNavigation && property.IsPrimaryKey) || isNavigationCollection)
                                        {
                                            var propertyMetadata = property;

                                            if (navigationName is not null)
                                            {
                                                propertyMetadata = ViewModel.Model.Properties
                                                    .First(propertyMetadata => propertyMetadata.Name == navigationName);
                                            }

                                            var navigationMetadata = propertyMetadata as NavigationMetadataDto;

                                            if (isNavigationCollection)
                                            {
                                                instance = cell.Item
                                                    .GetType()
                                                    .GetProperty(navigationMetadata.Name)?
                                                    .GetValue(cell.Item);
                                            }

                                            <MudButton @onclick="() => OpenDialog(instance, navigationMetadata)"
                                                       Variant="Variant.Text"
                                                       Color="Color.Primary">
                                                @propertyValue
                                            </MudButton>
                                        }
                                        else
                                        {
                                            @propertyValue
                                        }
                                    }
                                </CellTemplate>
                            </TemplateColumn>
                        }
                    }
                    <TemplateColumn>
                        <CellTemplate>
                            <MudButton Size="@Size.Small" Variant="Variant.Text" Color="Color.Secondary" OnClick="@(()=>ShowDeleteEntityConfirmationAsync(context.Item))">Delete</MudButton>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>

                <PagerContent>
                    <MudDataGridPager T="object"/>
                </PagerContent>
            </MudDataGrid>
        </MudItem>
    </MudGrid>
}
else
{
    <NotFound/>
}
